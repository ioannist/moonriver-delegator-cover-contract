{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "cancelCandidateBondLess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "cancelDelegationRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "candidateCount",
						"type": "uint256"
					}
				],
				"name": "cancelLeaveCandidates",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cancelLeaveDelegators",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "candidateAutoCompoundingDelegationCount",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "more",
						"type": "uint256"
					}
				],
				"name": "candidateBondMore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "candidateCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "candidateDelegationCount",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "candidateExitIsPending",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "candidateRequestIsPending",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "candidateDelegationCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "delegatorDelegationCount",
						"type": "uint256"
					}
				],
				"name": "delegate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "autoCompound",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "candidateDelegationCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "candidateAutoCompoundingDelegationCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "delegatorDelegationCount",
						"type": "uint256"
					}
				],
				"name": "delegateWithAutoCompound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "delegationAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "delegationAutoCompound",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "delegationRequestIsPending",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "more",
						"type": "uint256"
					}
				],
				"name": "delegatorBondMore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					}
				],
				"name": "delegatorDelegationCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "executeCandidateBondLess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "executeDelegationRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "candidateDelegationCount",
						"type": "uint256"
					}
				],
				"name": "executeLeaveCandidates",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "delegatorDelegationCount",
						"type": "uint256"
					}
				],
				"name": "executeLeaveDelegators",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "getCandidateTotalCounted",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					}
				],
				"name": "getDelegatorTotalStaked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "goOffline",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "goOnline",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "isCandidate",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					}
				],
				"name": "isDelegator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "isInTopDelegations",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "isSelectedCandidate",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "candidateCount",
						"type": "uint256"
					}
				],
				"name": "joinCandidates",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minDelegation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "round",
						"type": "uint256"
					}
				],
				"name": "points",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "round",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "less",
						"type": "uint256"
					}
				],
				"name": "scheduleCandidateBondLess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "less",
						"type": "uint256"
					}
				],
				"name": "scheduleDelegatorBondLess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "candidateCount",
						"type": "uint256"
					}
				],
				"name": "scheduleLeaveCandidates",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scheduleLeaveDelegators",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					}
				],
				"name": "scheduleRevokeDelegation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "selectedCandidates",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "candidate",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "value",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "candidateAutoCompoundingDelegationCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "delegatorDelegationCount",
						"type": "uint256"
					}
				],
				"name": "setAutoCompound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "The Moonbeam Team",
			"custom:address": "0x0000000000000000000000000000000000000800",
			"details": "The interface through which solidity contracts will interact with Parachain Staking We follow this same interface including four-byte function selectors, in the precompile that wraps the pallet",
			"kind": "dev",
			"methods": {
				"cancelCandidateBondLess()": {
					"custom:selector": "b5ad5f07",
					"details": "Cancel pending candidate bond request"
				},
				"cancelDelegationRequest(address)": {
					"custom:selector": "c90eee83",
					"details": "Cancel pending delegation request (already made in support of input by caller)",
					"params": {
						"candidate": "The address of the candidate"
					}
				},
				"cancelLeaveCandidates(uint256)": {
					"custom:selector": "9c76ebb4",
					"details": "Cancel request to leave the set of collator candidates",
					"params": {
						"candidateCount": "The number of candidates in the CandidatePool"
					}
				},
				"cancelLeaveDelegators()": {
					"custom:selector": "f7421284",
					"details": "Cancel request to leave the set of delegators"
				},
				"candidateAutoCompoundingDelegationCount(address)": {
					"custom:selector": "905f0806",
					"details": "Get the CandidateAutoCompoundingDelegationCount weight hint",
					"params": {
						"candidate": "The address for which we are querying the auto compounding     delegation count"
					},
					"returns": {
						"_0": "The number of auto compounding delegations"
					}
				},
				"candidateBondMore(uint256)": {
					"custom:selector": "a52c8643",
					"details": "Request to bond more for collator candidates",
					"params": {
						"more": "The additional amount self-bonded"
					}
				},
				"candidateCount()": {
					"custom:selector": "a9a981a3",
					"details": "Get the CandidateCount weight hint",
					"returns": {
						"_0": "The CandidateCount weight hint"
					}
				},
				"candidateDelegationCount(address)": {
					"custom:selector": "2ec087eb",
					"details": "Get the CandidateDelegationCount weight hint",
					"params": {
						"candidate": "The address for which we are querying the nomination count"
					},
					"returns": {
						"_0": "The number of nominations backing the collator"
					}
				},
				"candidateExitIsPending(address)": {
					"custom:selector": "43443682",
					"details": "Whether there exists a pending exit for candidate",
					"params": {
						"candidate": "the candidate for which the exit request was made"
					},
					"returns": {
						"_0": "Whether a pending request exists for such delegation"
					}
				},
				"candidateRequestIsPending(address)": {
					"custom:selector": "d0deec11",
					"details": "Whether there exists a pending bond less request made by a candidate",
					"params": {
						"candidate": "the candidate which made the request"
					},
					"returns": {
						"_0": "Whether a pending bond less request was made by the candidate"
					}
				},
				"delegate(address,uint256,uint256,uint256)": {
					"custom:selector": "829f5ee3",
					"details": "Make a delegation in support of a collator candidate",
					"params": {
						"amount": "The amount bonded in support of the collator candidate",
						"candidate": "The address of the supported collator candidate",
						"candidateDelegationCount": "The number of delegations in support of the candidate",
						"delegatorDelegationCount": "The number of existing delegations by the caller"
					}
				},
				"delegateWithAutoCompound(address,uint256,uint8,uint256,uint256,uint256)": {
					"custom:selector": "4b8bc9bf",
					"details": "Make a delegation in support of a collator candidate",
					"params": {
						"amount": "The amount bonded in support of the collator candidate",
						"autoCompound": "The percent of reward that should be auto-compounded",
						"candidate": "The address of the supported collator candidate",
						"candidateAutoCompoundingDelegationCount": "The number of auto-compounding delegations in support of the candidate",
						"candidateDelegationCount": "The number of delegations in support of the candidate",
						"delegatorDelegationCount": "The number of existing delegations by the caller"
					}
				},
				"delegationAmount(address,address)": {
					"custom:selector": "a73e51bc",
					"details": "The amount delegated in support of the candidate by the delegator",
					"params": {
						"candidate": "The candidate for which the delegation is in support of",
						"delegator": "Who made this delegation"
					},
					"returns": {
						"_0": "The amount of the delegation in support of the candidate by the delegator"
					}
				},
				"delegationAutoCompound(address,address)": {
					"custom:selector": "b4d4c7fd",
					"details": "Returns the percent value of auto-compound set for a delegation",
					"params": {
						"candidate": "the candidate for which the delegation was made",
						"delegator": "the delegator that made the delegation"
					},
					"returns": {
						"_0": "Percent of rewarded amount that is auto-compounded on each payout"
					}
				},
				"delegationRequestIsPending(address,address)": {
					"custom:selector": "3b16def8",
					"details": "Whether there exists a pending request for a delegation made by a delegator",
					"params": {
						"candidate": "the candidate for which the delegation was made",
						"delegator": "the delegator that made the delegation"
					},
					"returns": {
						"_0": "Whether a pending request exists for such delegation"
					}
				},
				"delegatorBondMore(address,uint256)": {
					"custom:selector": "0465135b",
					"details": "Bond more for delegators with respect to a specific collator candidate",
					"params": {
						"candidate": "The address of the collator candidate for which delegation shall increase",
						"more": "The amount by which the delegation is increased"
					}
				},
				"delegatorDelegationCount(address)": {
					"custom:selector": "067ec822",
					"details": "Get the DelegatorDelegationCount weight hint",
					"params": {
						"delegator": "The address for which we are querying the delegation count"
					},
					"returns": {
						"_0": "The number of delegations made by the delegator"
					}
				},
				"executeCandidateBondLess(address)": {
					"custom:selector": "2e290290",
					"details": "Execute pending candidate bond request",
					"params": {
						"candidate": "The address for the candidate for which the request will be executed"
					}
				},
				"executeDelegationRequest(address,address)": {
					"custom:selector": "e98c8abe",
					"details": "Execute pending delegation request (if exists && is due)",
					"params": {
						"candidate": "The address of the candidate",
						"delegator": "The address of the delegator"
					}
				},
				"executeLeaveCandidates(address,uint256)": {
					"custom:selector": "3867f308",
					"details": "Execute due request to leave the set of collator candidates",
					"params": {
						"candidate": "The candidate address for which the pending exit request will be executed",
						"candidateDelegationCount": "The number of delegations for the candidate to be revoked"
					}
				},
				"executeLeaveDelegators(address,uint256)": {
					"custom:selector": "fb1e2bf9",
					"details": "Execute request to leave the set of delegators and revoke all delegations",
					"params": {
						"delegator": "The leaving delegator",
						"delegatorDelegationCount": "The number of active delegations to be revoked by delegator"
					}
				},
				"getCandidateTotalCounted(address)": {
					"custom:selector": "bc5a1043",
					"details": "Fetch the total staked towards a candidate.",
					"params": {
						"candidate": "Address of the candidate."
					},
					"returns": {
						"_0": "Total amount of stake."
					}
				},
				"getDelegatorTotalStaked(address)": {
					"custom:selector": "e6861713",
					"details": "Fetch the total staked amount of a delegator, regardless of the candidate.",
					"params": {
						"delegator": "Address of the delegator."
					},
					"returns": {
						"_0": "Total amount of stake."
					}
				},
				"goOffline()": {
					"custom:selector": "a6485ccd",
					"details": "Temporarily leave the set of collator candidates without unbonding"
				},
				"goOnline()": {
					"custom:selector": "6e5b676b",
					"details": "Rejoin the set of collator candidates if previously had called `goOffline`"
				},
				"isCandidate(address)": {
					"custom:selector": "d51b9e93",
					"details": "Check whether the specified address is currently a collator candidate",
					"params": {
						"candidate": "the address that we want to confirm is a collator andidate"
					},
					"returns": {
						"_0": "A boolean confirming whether the address is a collator candidate"
					}
				},
				"isDelegator(address)": {
					"custom:selector": "fd8ab482",
					"details": "Check whether the specified address is currently a staking delegator",
					"params": {
						"delegator": "the address that we want to confirm is a delegator"
					},
					"returns": {
						"_0": "A boolean confirming whether the address is a delegator"
					}
				},
				"isInTopDelegations(address,address)": {
					"custom:selector": "91cc8657",
					"details": "Whether the delegation is in the top delegations",
					"params": {
						"candidate": "The candidate for which the delegation is in support of",
						"delegator": "Who made this delegation"
					},
					"returns": {
						"_0": "If delegation is in top delegations (is counted)"
					}
				},
				"isSelectedCandidate(address)": {
					"custom:selector": "740d7d2a",
					"details": "Check whether the specifies address is currently a part of the active set",
					"params": {
						"candidate": "the address that we want to confirm is a part of the active set"
					},
					"returns": {
						"_0": "A boolean confirming whether the address is a part of the active set"
					}
				},
				"joinCandidates(uint256,uint256)": {
					"custom:selector": "1f2f83ad",
					"details": "Join the set of collator candidates",
					"params": {
						"amount": "The amount self-bonded by the caller to become a collator candidate",
						"candidateCount": "The number of candidates in the CandidatePool"
					}
				},
				"minDelegation()": {
					"custom:selector": "02985992",
					"details": "Get the minimum delegation amount",
					"returns": {
						"_0": "The minimum delegation amount"
					}
				},
				"points(uint256)": {
					"custom:selector": "9799b4e7",
					"details": "Total points awarded to all collators in a particular round",
					"params": {
						"round": "the round for which we are querying the points total"
					},
					"returns": {
						"_0": "The total points awarded to all collators in the round"
					}
				},
				"round()": {
					"custom:selector": "146ca531",
					"details": "Get the current round number",
					"returns": {
						"_0": "The current round number"
					}
				},
				"scheduleCandidateBondLess(uint256)": {
					"custom:selector": "60744ae0",
					"details": "Request to bond less for collator candidates",
					"params": {
						"less": "The amount to be subtracted from self-bond and unreserved"
					}
				},
				"scheduleDelegatorBondLess(address,uint256)": {
					"custom:selector": "c172fd2b",
					"details": "Request to bond less for delegators with respect to a specific collator candidate",
					"params": {
						"candidate": "The address of the collator candidate for which delegation shall decrease",
						"less": "The amount by which the delegation is decreased (upon execution)"
					}
				},
				"scheduleLeaveCandidates(uint256)": {
					"custom:selector": "b1a3c1b7",
					"details": "Request to leave the set of collator candidates",
					"params": {
						"candidateCount": "The number of candidates in the CandidatePool"
					}
				},
				"scheduleLeaveDelegators()": {
					"custom:selector": "f939dadb",
					"details": "Request to leave the set of delegators"
				},
				"scheduleRevokeDelegation(address)": {
					"custom:selector": "1a1c740c",
					"details": "Request to revoke an existing delegation",
					"params": {
						"candidate": "The address of the collator candidate which will no longer be supported"
					}
				},
				"selectedCandidates()": {
					"custom:selector": "bcf868a6",
					"details": "Get the selected candidates for the current round",
					"returns": {
						"_0": "The selected candidate accounts"
					}
				},
				"setAutoCompound(address,uint8,uint256,uint256)": {
					"custom:selector": "faa1786f",
					"details": "Sets an auto-compound value for a delegation",
					"params": {
						"candidate": "The address of the supported collator candidate",
						"candidateAutoCompoundingDelegationCount": "The number of auto-compounding delegations in support of the candidate",
						"delegatorDelegationCount": "The number of existing delegations by the caller",
						"value": "The percent of reward that should be auto-compounded"
					}
				}
			},
			"title": "Pallet Parachain Staking Interface",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancelLeaveDelegators()": {
					"notice": "DEPRECATED use batch util with cancelDelegationRequest for all delegations"
				},
				"executeLeaveDelegators(address,uint256)": {
					"notice": "DEPRECATED use batch util with executeDelegationRequest for all delegations"
				},
				"scheduleLeaveDelegators()": {
					"notice": "DEPRECATED use batch util with scheduleRevokeDelegation for all delegations"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"interfaces/StakingInterface.sol": "ParachainStaking"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"interfaces/StakingInterface.sol": {
			"keccak256": "0xdd6ededcaf8f449bbcd93ccb608dba867221a7f0b6efeb2e06e5474fd02816f9",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://3fb761e7914cd6ef592045079ed71d6171c16e7bcd29f896aae307f5b61d4ca1",
				"dweb:/ipfs/Qmf9uaeMdYXFvRXMN6x6Ex3tjzqCQUtDF7VWznEpXNwe4L"
			]
		}
	},
	"version": 1
}